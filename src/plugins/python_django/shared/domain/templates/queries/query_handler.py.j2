from abc import ABC, abstractmethod
from typing import Generic, TypeVar
from shared.domain.queries.query import Query
from shared.domain.queries.response import Response


Q = TypeVar('Q', bound=Query)
R = TypeVar('R', bound=Response)


class QueryHandler(ABC, Generic[Q, R]):
  @abstractmethod
  def subscribed_to(self) -> type[Query]:
    raise NotImplementedError

  @abstractmethod
  async def handle(self, query: Q) -> R:
    raise NotImplementedError