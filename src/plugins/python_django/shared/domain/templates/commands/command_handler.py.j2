from abc import ABC, abstractmethod
from typing import Generic, TypeVar
from shared.domain.commands.command import Command


C = TypeVar("C", bound=Command)


class CommandHandler(ABC, Generic[C]):  # noqa: UP046
  @abstractmethod
  async def handle(self, command: C) -> None:
    raise NotImplementedError

  @classmethod
  @abstractmethod
  def subscribed_to(cls) -> type[Command]:
    raise NotImplementedError
